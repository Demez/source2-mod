///////////////////////////////////////////////////////////////////////////////////
// 
// Core
//
//////////////////////////////////////////////////////////////////////////////////
//

"system_source_entity_opvars"
{
	"system_source_entity_opvars"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"entity_index"
			{	
				"data_type" "float"
				"value" "-1"
			}
			"entity_classname"
			{	
				"data_type" "string128"
				"value" "EMPTYSTRING"
			}
		}	
	}
}
"system_globals"
{
	"test_opvars"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"test_float"
			{	
				"data_type" "float"
				"value" "1.0"	
			}
			"number_of_local_players"
			{	
				"data_type" "float"
				"value" "666.0"	
			}
			"local_player_origins"
			{	
				"data_type" "float3"
				"value"
				{						
					"value" "[ 1.0, 2.0, 3.0 ]"
					"value" "[ 2.0, 2.0, 3.0 ]"
					"value" "[ 3.0, 2.0, 3.0 ]"
					"value" "[ 4.0, 2.0, 3.0 ]"
				}
			}
		}			
	}
	
	"daves_test_opvars"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"timer_run"
			{	
				"data_type" "float"
				"value" "false"	
			}
			
			"timer_reset"
			{	
				"data_type" "float"
				"value" "0.0"	
			}
			
			"sb_bang"
			{
				"data_type" "float"
				"value"	"0.0"
			}
			
			"trigger_test_01"
			{
				"data_type"	"float"
				"value"	 "0.0"
			}
			
			"trigger_test_02"
			{
				"data_type"	"float"
				"value"	 "0.0"
			}
			
			"g_corruption"
			{
				"data_type"	"float"
				"value"	 "0.0"			
			}
			
			"g_wind"
			{
				"data_type"	"float"
				"value"	 "0.0"			
			}
			
			"g_rain"
			{
				"data_type"	"float"
				"value"	 "0.0"			
			}
			
			"g_fog"
			{
				"data_type"	"float"
				"value"	 "0.0"			
			}
			
			"g_clouds"
			{
				"data_type"	"float"
				"value"	 "0.0"			
			}
			
			"g_time"
			{
				"data_type"	"float"
				"value"	 "0.0"			
			}
		}		
	}
	
	"player_character_opvars"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"local_unit_velocity"
			{	
				"data_type" "float"
				"value" "0.0"	
			}
			"local_unit_max_health"
			{	
				"data_type" "float"
				"value" "0.0"	
			}
			"local_unit_current_health"
			{	
				"data_type" "float"
				"value" "0.0"	
			}
		}	
	}	
}

/////////////////////////////////////////////////
// distance based event limiting
/////////////////////////////////////////////////
"core_distance_limiter"
{
	"public"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"distance"
			{
				"data_type" "float"
				"value" "0.0"	
			}
			"distance_max"
			{
				"data_type" "float"
				"value" "5000.0"	
			}
		}
	}
	
	"dist_limit_on"
	{
		"operator" "math_float"
		"execute_once" "true"
		"apply" "greater_than"	
		"input1" "@public.distance_max"
		"input2" "-1.0"
	}
	"dist_limit_test"
	{
		"operator" "math_float"
		"execute_once" "true"
		"apply" "greater_than"
		"input_execute" "@dist_limit_on.output"	
		"input1" "@public.distance"
		"input2" "@public.distance_max"	
	}
	"dist_limit_and"
	{
		"operator" "math_float"
		"execute_once" "true"
		"apply" "min"
		"input_execute" "1.0"
		"input1" "@dist_limit_on.output"
		"input2" "@dist_limit_test.output"	
	}
	"exit"
	{
		"operator" "sos_goto"
		"execute_once" "true"
		"input_execute" "@dist_limit_and.output"
		"input_goto_end" "true"
	}
}

/////////////////////////////////////////////////
// stop this stack after elapsed time
/////////////////////////////////////////////////
"core_soundevent_blocker" //Generic exclusion time.  Override values to make usable.
{
	"public"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"on"
			{
				"data_type" "float"
				"value" "0.0"	
			}
			"match_soundevent"
			{
				"data_type" "string128"
				"value" "NONE"
			}
			"match_substring"
			{
				"data_type" "float"
				"value" "0"
			}
			"match_event_type"
			{
				"data_type" "float"
				"value" "-1"
			}
			"match_entity"
			{
				"data_type" "float"
				"value" "0"
			}
			"min_time"
			{
				"data_type" "float"
				"value" "0.1"
			}
			"max_time"
			{
				"data_type" "float"
				"value" "0.1"
			}
		}
	}
	"get_rand_time"
	{
		"operator" "math_random_float"
		"input_execute" "@public.on"
		"input_min" "@public.min_time"
		"input_max" "@public.max_time"
	}
	
	"block_entries"
	{
		"operator" "soundevent_limiter"
		"input_execute" "@public.on"
		"input_active" "1"
		"input_duration" "@get_rand_time.output" //in seconds, you can use "@get_random.output" for a random blocking period
		"match_event_name" "@public.match_soundevent"
		"match_substring" "@public.match_substring"
		"match_event_type" "@public.match_event_type"
		"match_entity" "@public.match_entity"
	}
}

/////////////////////////////////////////////////
// stop this stack after elapsed time
/////////////////////////////////////////////////
"core_stop_at_time"
{
	"public"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"time"
			{
				"data_type" "float"
				"value" "0.0"	
			}
		}
	}
	"get_event_info"
	{
		"operator" "soundevent_get_info"
	}	
	"stop_time"
	{
		"operator" "math_float"
		"apply" "greater_than"	
		"input1" "@get_event_info.output_elapsed_time"
		"input2" "@public.time"
	}
	"stop_this_event"
	{
		"input_execute" "@stop_time.output"
		"operator" "soundevent_control"
		"input_stop" "1.0"
	}
}

/////////////////////////////////////////////////
// simple volume only non-update
/////////////////////////////////////////////////
"core_start_simple_oneshot"
{
	"public"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"start"
			{
				"data_type" "float"
				"value" "1.0"	
			}
			"volume"
			{	
				"data_type" "float"
				"value" "1.0"	
			}
			"vsnd_files"
			{	
				"data_type" "vsnd"
				"value" "sounds/common/null.vsnd"
			}
			"memory_type"
			{
				"data_type" "float"
				"value" "0"
			}
		}
	}
	"volume_fan"
	{
		"operator" "util_float_to_speakers"
		"input" "@public.volume"
	}
	"start_vsnd"
	{
		"operator" "sms_start_vsnd"
		"input_vsnd" "@public.vsnd_files"
		"execute_once" "false"
		"input_execute" "1.0"
		"input_start" "@public.start"
		"input_speaker_volumes" "@volume_fan.output"
		"input_pitch" "1.0"
		"input_memory_type" "@public.memory_type"

	}
}

/////////////////////////////////////////////////
// volume and pitch ranged non-update
// this stack will only execute once
/////////////////////////////////////////////////
"core_start_oneshot"
{
	"public"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"start"
			{
				"data_type" "float"
				"value" "1.0"	
			}
			"volume_min"
			{	
				"data_type" "float"
				"value" "0.9"	
			}
			"volume_max"
			{	
				"data_type" "float"
				"value" "1.0"	
			}
			"pitch_min"
			{	
				"data_type" "float"
				"value" "0.95"	
			}
			"pitch_max"
			{	
				"data_type" "float"
				"value" "1.05"	
			}
			"vsnd_files"
			{	
				"data_type" "vsnd"
				"value" "sounds/common/null.vsnd"
			}
			"memory_type"
			{
				"data_type" "float"
				"value" "0"
			}
		}
	}
	"pitch_random"
	{
		"operator" "math_random_float"
		"execute_once" "true"
		"input_min" "@public.pitch_min"
		"input_max" "@public.pitch_max"
	}
	"volume_random"
	{
		"operator" "math_random_float"
		"execute_once" "true"
		"input_min" "@public.volume_min"
		"input_max" "@public.volume_max"
	}
	"volume_fan"
	{
		"operator" "util_float_to_speakers"
		"execute_once" "true"
		"input" "@volume_random.output"
	}
	"start_vsnd"
	{
		"operator" "sms_start_vsnd"
		"input_vsnd" "@public.vsnd_files"
		"execute_once" "false"
		"input_execute" "1.0"
		"input_start" "@public.start"
		"input_speaker_volumes" "@volume_fan.output"
		"input_pitch" "@pitch_random.output"
		"input_memory_type" "@public.memory_type"

	}
}
///////////////////////////////////////////////////////////////////////////////////
// 
// Valve
//
//////////////////////////////////////////////////////////////////////////////////
"core_valve_default"
{
	"public"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"start"
			{
				"data_type" "float"
				"value" "1.0"	
			}
			"volume_min"
			{	
				"data_type" "float"
				"value" "0.9"	
			}
			"volume_max"
			{	
				"data_type" "float"
				"value" "1.0"	
			}
			"pitch_min"
			{	
				"data_type" "float"
				"value" "0.95"	
			}
			"pitch_max"
			{	
				"data_type" "float"
				"value" "1.05"	
			}
			"vsnd_files"
			{	
				"data_type" "vsnd"
				"value" "sounds/common/null.vsnd"
			}
			"memory_type"
			{
				"data_type" "float"
				"value" "0"
			}
		}
	}
	"pitch_random"
	{
		"operator" "math_random_float"
		"execute_once" "true"
		"input_min" "@public.pitch_min"
		"input_max" "@public.pitch_max"
	}
	"volume_random"
	{
		"operator" "math_random_float"
		"execute_once" "true"
		"input_min" "@public.volume_min"
		"input_max" "@public.volume_max"
	}
	"volume_fan"
	{
		"operator" "util_float_to_speakers"
		"execute_once" "true"
		"input" "@volume_random.output"
	}
	"start_vsnd"
	{
		"operator" "sms_start_vsnd"
		"input_vsnd" "@public.vsnd_files"
		"execute_once" "false"
		"input_execute" "@public.start"
		"input_start" "@public.start"
		"input_speaker_volumes" "@volume_fan.output"
		"input_pitch" "@pitch_random.output"
		"input_memory_type" "@public.memory_type"

	}
}
"core_simple_3d"
{
	"public"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"volume"
			{	
				"data_type" "float"
				"value" "1.0"	
			}
			"pitch"
			{	
				"data_type" "float"
				"value" "1.0"	
			}
			"distance_min"
			{	
				"data_type" "float"
				"value" "24"	
			}
			"distance_max"
			{	
				"data_type" "float"
				"value" "360"	
			}
			"position"
			{	
				"data_type" "float3"
				"value" "[0.0, 0.0, 0.0]"
			}
			"vsnd_files"
			{	
				"data_type" "vsnd"
				"soundevent_data" "true"
				"value"
				{
					"value0" "sounds/common/null.vsnd"
				}
			}
			"delay"
			{	
				"data_type" "float"
				"value" "0.0"	
			}
			"memory_type"
			{
				"data_type" "float"
				"value" "0"
			}
		}
	}

	///////////////////////////////////////////////////////////////
	// time
	"get_event_info"
	{
		"operator" "soundevent_get_info"
	}

	"globals"
	{
		"operator" "get_system_globals"
		"input_execute"	"1"
		"input_listener_index" "0"
	}

	//////////////////////
	// positions
	"source_info"
	{
		"operator" "game_get_source_info"
		"source"   "entity"
	}
	"get_entity_info"
	{
		"operator" "game_entity_info"
		"input_entity_index" "@source_info.output_entity_index"
		// if valid entity, but we can't get enitty position, output this position
		"input_default_world_position" "@public.position"
		// if not an entity, write this position
		"input_default_local_position" "@globals.output_listener_front"
	}
	"distance_to_source"
	{
		"operator" "calc_distance"
		"input_position1" "@get_entity_info.output_position"
		"input_position2" "@globals.output_listener_position"
	}


///////////////////////////////////////////////////////////////
// src2 todo : needs channel
	"get_vsnd_array_index"
	{
		"operator" "opvar_get_random_array_index"
		"execute_once" "true"	
		"check_event_data" "true"
		"input_operator_name"	"public"
		"input_field_name" "vsnd_files"
		"input_selection_field_name" "vsnd_file_selections"
		"sequence_type" "random"
		"input_use_namespace" "false"
	}
	"get_vsnd"
	{
		"operator" "opvar_get_vsnd"
		"execute_once" "true"	
		"check_event_data" "true"
		"input_operator_name" "public"
		"input_field_name" "vsnd_files"
		"input_index" "@get_vsnd_array_index.output"
		"input_use_namespace" "false"
	}

	/////////////////////
	// VOLUME
	"volume_linear_falloff"
	{
		"operator" "math_remap_float"
		"input"  "@distance_to_source.output"
		"input_min" "@public.distance_min"
		"input_max" "@public.distance_max"
		"input_map_min" "1.0"
		"input_map_max" "0.0"
	}

    // multiply all volume adjustments together
	"volume_accumulate"
	{
		"operator" "math_accumulate12_float"
		"apply"	"mult"
		"input1" "@public.volume"
		"input2" "@volume_linear_falloff.output"
//		"input3" "@mixer.output_volume"
		"input3" "1.0"
		"input4" "@globals.output_snd_gain_convar"
//		"input5" "@occlusion.output"
		"input5" "1.0"
		"input6" "1.0"
		"input7" "1.0"
		"input8" "1.0"
		"input9" "1.0"
		"input10" "1.0"
		"input11" "1.0"
		"input12" "1.0"
	}

	/////////////////////
	// SPEAKERS

	// NOTE: uses player data, ie: SS, calculates all players and merges them
	"speakers_spatialize"
	{
		"operator" "calc_spatialize_speakers"
		"input_master_volume" "@volume_accumulate.output"
		"input_radius"  "300"
		"input_distance"  "@distance_to_source.output"
		"input_source_position"  "@get_entity_info.output_position"
		"input_listener_position"  "@globals.output_listener_position"
		"input_listener_left"  "@globals.output_listener_left"
		"input_rear_stereo_scale" "1.0"
	}

	"start_vsnd"
	{
		"operator" "sms_start_vsnd"
		"input_vsnd" "@get_vsnd.output"
		"execute_once" "false"
		"input_execute" "1.0"
		"input_start" "@get_event_info.output_unstopped"
		"input_speaker_volumes" "@speakers_spatialize.output"
		"input_pitch" "@public.pitch"
		"input_delay" "@public.delay"
		"input_memory_type" "@public.memory_type"
		"operator_variables"
		{
			"send_room_dsp"
			{	
				"data_type" "float"
				"value" "0.0"
			}
		}
	}
}


///////////////////////////////////////////////////////////////////////////////////
// 
// utilities
//
//////////////////////////////////////////////////////////////////////////////////
"core_max_multiple"
{
	"public"
	{
		"operator" "util_null"
		"operator_variables"
		{
			"input1"
			{
				"data_type" "float"
				"value" "1.0"	
			}
			"input2"
			{	
				"data_type" "float"
				"value" "1.0"
			}
			"input3"
			{	
				"data_type" "float"
				"value" "1.0"	
			}
			"input4"
			{	
				"data_type" "float"
				"value" "1.0"
			}
			"input5"
			{	
				"data_type" "float"
				"value" "1.0"
			}
			"input6"
			{	
				"data_type" "float"
				"value" "1.0"
			}
			"output"
			{
				"data_type" "float"
				"value" "1.0"			
			}
		}
	}
	
	"minmax_01"
	{
		"operator" "math_float"
		"apply" "max"	
		"input1" "@public.input1"
		"input2" "@public.input2"	
	}
	
	"minmax_02"
	{
		"operator" "math_float"
		"apply" "max"	
		"input1" "@minmax_01.output"
		"input2" "@public.input3"	
	}
	
	"minmax_03"
	{
		"operator" "math_float"
		"apply" "max"	
		"input1" "@minmax_02.output"
		"input2" "@public.input4"	
	}
	
	"minmax_04"
	{
		"operator" "math_float"
		"apply" "max"	
		"input1" "@minmax_03.output"
		"input2" "@public.input5"	
	}
	
	"minmax_05"
	{
		"operator" "math_float"
		"apply" "max"	
		"input1" "@minmax_04.output"
		"input2" "@public.input6"	
	}
	"set_output_opvar"
	{
		"operator" 				"opvar_set_float"
		"input"					"@minmax_05.output"
		"input_stack_name" 		""
		"input_operator_name"	"public"
		"input_field_name" 		"output"
		"input_use_namespace" 	"true"
	}
}
