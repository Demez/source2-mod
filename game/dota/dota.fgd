//-------------------------------------------------------------------------
//
// Game data for DOTA!
//
//-------------------------------------------------------------------------

@include "base.fgd"

@helpinfo( "HALF-LIFE 2", "tools/help/fgd/hl2.txt" )

@gridnav(64, 32, 32, 16384)

@BaseClass = teamnumber

@SolidClass base(worldbase) = worldspawn : 
	"This is the world entity. Each map can only contain one, and it's automatically created for you."
[
	pvstype(choices) : "Precomputed Visibility" : 0 : "" = 
	[
		0 : "Disabled"
		1 : "Test map (open space, no skybox)"
		10 : "Full visibility solve"
	]

	OptimizedHeightFieldName(string) : "Optimized Heightfield Name" : "" : "Optional name of an optimized heightfield to use for ground traces. An example is maps/someheightfield.bin."
	skyname(string) : "SkyBox Texture Name" : "materials/skybox/sky_tintable_01"

	AllowHeightFog(boolean) : "Allow Height Fog" : "0"
	HeightFogWorldScale(float) : "Height Fog World Scale" : "456"
	HeightFogAdjustment(float) : "Height Fog Adjustment" : "-160"
	HeightFogScale(float) : "Height Fog Scale" : "128"
	HeightFogScale1(float) : "Height Fog Scale 1" : "0.85"
	HeightFogScale2(float) : "Height Fog Scale 2" : "0.85"
	HeightFogDrawScale1(float) : "Height Fog Draw Scale 1" : "1000"
	HeightFogDrawScale2(float) :  "Height Fog Draw Scale 2" : "0.09"
	HeightFogScrollDir1(vector) : "Height Fog Scroll Dir 1" : "-0.047 0.074 0"
	HeightFogScrollDir2(vector) : "Height Fog Scroll Dir 2" : "-0.114 0.02 0"
	HeightFogTexture(resource:texture) : "Height Fog Texture" : "materials/effects/fow_clouds_00.vtex"
	HeightFogMaskTexture(resource:texture) : "Height Fog Mask Texture" : "materials/effects/fog_world_00.vtex"
]

@PointClass base(Targetname) = ent_dota_game_events : 
	"An entity that fires outputs based on game events."
[
	// Outputs
	output OnDayStarted(void) : "Fired when the day starts."
	output OnNightStarted(void) : "Fired when the night starts."
	output OnRadiantFortDestroyed(void) : "Fired when the Radiant Ancient is destroyed."
	output OnDireFortDestroyed(void) : "Fired when the Dire Ancient is destroyed."
	output OnGameEnded(void) : "Fired when the game ends."
	output OnGameStarted(void) : "Fired when game starts."
	input SetTimeOfDay(float) : "Sets the time of day (0.0->1.0)"
]

@PointClass base(Targetname) = dota_displacement_visibility: 
	"Entity that can hide a displacement"
[
	input	HideDisplacement(integer) : "Hides the specified displacement."
]

@PointClass base(Targetname) = dota_minimap_boundary: 
	"Used by the console command dota_minimap_create to define the min/max coordinates for taking minimap images. Two are required per map in opposite corners. The z difference between the two defines the image depth."
[
]

@PointClass base(Targetname) = npc_dota_roshan_spawner: 
	"Spawns Roshan, the big boss in the standard Dota2 PvP map."
[
]	

@PointClass base(Targetname) = ent_sugar_rush: 
	"Sugar Rush spot for Roshan."
[
]

@PointClass base(prop_dynamic_base, Targetname) studioprop() = ent_dota_radiant_candybucket: 
	"(used in Diretide event) Spawns a Radiant candy bucket."
[
]	

@PointClass base(prop_dynamic_base, Targetname) studioprop() = ent_dota_dire_candybucket: 
	"(used in Diretide event) Spawns a Dire candy bucket."
[
]	
	

@PointClass base(Targetname) sphere(inner_radius) sphere(outer_radius) dotaLightInfoHelper() = ent_dota_lightinfo: 
	"Localized lighting settings to control lighting parameters in a radius."
[
	color_day(color255) : "Color - Day" : "0 0 0" : "Daytime color."
	color_night(color255) : "Color - Night" : "0 0 0" : "Nighttime color."
	light_scale_day(float) : "Light Scale - Day" : "1" : "Daytime light scale."
	light_scale_night(float) : "Light Scale - Night" : "1" : "Daytime light scale."
	ambient_color_day(color255) : "Ambient Color - Day" : "0 0 0" : "Ambient Daytime color."
	ambient_color_night(color255) : "Ambient Color - Night" : "0 0 0" : "Ambient Nighttime color."
	ambient_scale_day(float) : "Ambient Scale - Day" : "0" : "Ambient Daytime scale."
	ambient_scale_night(float) : "Ambient Scale - Night" : "0" : "Ambient Nighttime scale."
	shadow_color_day(color255) : "Shadow Color - Day" : "0 0 0" : "Shadow Daytime color."
	shadow_color_night(color255) : "Shadow Color - Night" : "0 0 0" : "Shadow Nighttime color."
	shadow_scale_day(float) : "Shadow Scale - Day" : "0" : "Shadow Daytime scale."
	shadow_scale_night(float) : "Shadow Scale - Night" : "0" : "Shadow Nighttime scale."
	shadow_ground_scale_day(float) : "Shadow Ground Scale - Day" : "0" : "Shadow Daytime ground scale."
	shadow_ground_scale_night(float) : "Shadow Ground Scale - Night" : "0" : "Shadow Nighttime ground scale."
	specular_color_day(color255) : "Specular Color - Day" : "0 0 0" : "Specular Daytime color."
	specular_color_night(color255) : "Specular Color - Night" : "0 0 0" : "Specular Nighttime color."
	light_direction_day(vector) : "Light Direction - Day" : "0 0 0" : "Light Daytime direction."
	light_direction_night(vector) : "Light Direction - Night" : "0 0 0" : "Light Nighttime direction."
	ambient_direction_day(vector) : "Ambient Direction - Day" : "0 0 0" : "Ambient Daytime direction."
	ambient_direction_night(vector) : "Ambient Direction - Night" : "0 0 0" : "Ambient Nighttime direction."
	fog_color_day(color255) : "Fog Color - Day" : "0 0 0" : "Fog Daytime color."
	fog_color_night(color255) : "Fog Color - Night" : "0 0 0" : "Fog Nighttime color."
	fog_start_day(float) : "Fog Start - Day" : "0" : "Daytime Fog Start distance."
	fog_start_night(float) : "Fog Start - Night" : "0" : "Night Fog Start distance."
	fog_end_day(float) : "Fog End - Day" : "0" : "Daytime Fog Start distance."
	fog_end_night(float) : "Fog End - Night" : "0" : "Night Fog End distance."
	fog_height_day(float) : "Height Fog - Day" : "0" : "Daytime Fog Height."
	fog_height_night(float) : "Height Fog - Night" : "0" : "Night Fog Height."
	fog_hight_color_day(color255) : "Height Fog Color - Day" : "0" : "Daytime Height Fog Color"
	fog_hight_color_night(color255) : "Height Fog Color - Night" : "0" : "Night Height Fog Color"
	fow_darkess_day(float) : "FoW Darkness - Day" : "0" : "Daytime FoW Darkness."
	fow_darkess_night(float) : "FoW Darkness - Night" : "0" : "Night FoW Darkness."
	fow_color_r_day(float) : "FoW Color R - Day" : "0" : "Daytime FoW Color R"
	fow_color_g_day(float) : "FoW Color G - Day" : "0" : "Daytime FoW Color G"
	fow_color_b_day(float) : "FoW Color B - Day" : "0" : "Daytime FoW Color B"
	fow_color_r_night(float) : "FoW Color R - Night" : "0" : "Night FoW Color R"
	fow_color_g_night(float) : "FoW Color G - Night" : "0" : "Night FoW Color G"
	fow_color_b_night(float) : "FoW Color B - Night" : "0" : "Night FoW Color B"
	skybox_name(string) : "Skybox Name" : "" : "Name of the skybox material to use."
	skybox_tint_day(color255) : "Skybox Tint - Day" : "0" : "Tint to apply to the skybox during the day."
	skybox_tint_night(color255) : "Skybox Tint - Night" : "0" : "Tint to apply to the skybox during the night."

	inner_radius(float) : "Inner Radius" : "0" : "Radius inside which the global light is exactly the specified color."
	outer_radius(float) : "Outer Radius" : "0" : "Radius inside which the global light is partially the specified color."

	preview_day_or_night(choices) :"Preview" : 0 =
	[
		0: "Day"
		1: "Night"
	]
]	

@PointClass base(Targetname) = ent_fow_blocker_node: 
	"Blocks fog of war along a line to its target."
[
	TargetNode(string) : "Target Node" : "" : "Name of the entity between which FoW is blocked."
]

@PointClass base(Targetname, teamnumber) sphere(visionrange) = ent_fow_revealer: 
	"Reveals fog of war in a radius."
[
	visionrange(integer) : "Vision Range" : 500 : "Radius of vision to reveal"
]

@PointClass base(Targetname) = npc_dota_neutral_spawner: 
	"Spawns neutral units."
[
	NeutralType(choices) :"Camp Type" : 0 =
	[
		0: "Easy"
		1: "Moderate"
		2: "Hard"
		3: "Ancient"
	]

	ForcedSubType(choices) :"Force Spawn Type" : -1 =
	[
		0: "Random (Normal Gamerules)"
		1: "Kobolds (E), Ogres (M), Centaurs (H), Drakes (A)"
		2: "Gnolls (E), Wolves (M), Troll Warlord (H), Rock Golems (A)"
		3: "Troll Priest (E), Mud Golems (M), Ursa (H), Lizards (A)"
		4: "Trolls & Kobold (E), Satyrs (M), Satyrs (H)"
		5: "Ghosts (E), Centaurs (M), Wildkin (H)"
		6: "Harpies (E)"
	]

	BatchLimit(integer) : "Spawn Limit" : 0 : "The max number of times this spawner is allowed to spawn its creeps. If 0, will spawn infinitely."

	VolumeName(target_destination) : "Volume Name" : "" : "Name of the volume used to determine whether to spawn."

	output OnSpawnerExhausted(void) : "Fired when a spawner with a batch limit has run out of batches."
]

@PointClass base(Targetname) = npc_dota_spawner_good_top: 
	"Spawns Radiant creeps in the top lane of the standard Dota2 PvP map."
[
	NPCScriptName(string) : "NPC Script" : "" : "Name of the NPC script used to spawn this character."
	NPCUniqueName(string) : "Unique NPC Name" : "" : "Name of the NPC."
	NPCFirstWaypoint(target_destination) : "First Waypoint" : "" : "First Waypoint the creeps will head to" 
	input	SpawnNPCFromScript(integer) : "Spawn X npcs from the script."
]

@PointClass base(Targetname) = npc_dota_spawner_good_mid: 
	"Spawns Radiant creeps in the middle lane of the standard Dota2 PvP map."
[
	NPCScriptName(string) : "NPC Script" : "" : "Name of the NPC script used to spawn this character."
	NPCUniqueName(string) : "Unique NPC Name" : "" : "Name of the NPC."
	NPCFirstWaypoint(target_destination) : "First Waypoint" : "" : "First Waypoint the creeps will head to" 
	input	SpawnNPCFromScript(integer) : "Spawn X npcs from the script."
]

@PointClass base(Targetname) = npc_dota_spawner_good_bot: 
	"Spawns Radiant creeps in the bottom lane of the standard Dota2 PvP map."
[
	NPCScriptName(string) : "NPC Script" : "" : "Name of the NPC script used to spawn this character."
	NPCUniqueName(string) : "Unique NPC Name" : "" : "Name of the NPC."
	NPCFirstWaypoint(target_destination) : "First Waypoint" : "" : "First Waypoint the creeps will head to" 
	input	SpawnNPCFromScript(integer) : "Spawn X npcs from the script."
]

@PointClass base(Targetname) = npc_dota_spawner_bad_top: 
	"Spawns Dire creeps in the top lane of the standard Dota2 PvP map."
[
	NPCScriptName(string) : "NPC Script" : "" : "Name of the NPC script used to spawn this character."
	NPCUniqueName(string) : "Unique NPC Name" : "" : "Name of the NPC."
	NPCFirstWaypoint(target_destination) : "First Waypoint" : "" : "First Waypoint the creeps will head to" 
	input	SpawnNPCFromScript(integer) : "Spawn X npcs from the script."
]

@PointClass base(Targetname) = npc_dota_spawner_bad_mid: 
	"Spawns Dire creeps in the middle lane of the standard Dota2 PvP map."
[
	NPCScriptName(string) : "NPC Script" : "" : "Name of the NPC script used to spawn this character."
	NPCUniqueName(string) : "Unique NPC Name" : "" : "Name of the NPC."
	NPCFirstWaypoint(target_destination) : "First Waypoint" : "" : "First Waypoint the creeps will head to" 
	input	SpawnNPCFromScript(integer) : "Spawn X npcs from the script."
]

@PointClass base(Targetname) = npc_dota_spawner_bad_bot: 
	"Spawns Dire creeps in the bottom lane of the standard Dota2 PvP map."
[
	NPCScriptName(string) : "NPC Script" : "" : "Name of the NPC script used to spawn this character."
	NPCUniqueName(string) : "Unique NPC Name" : "" : "Name of the NPC."
	NPCFirstWaypoint(target_destination) : "First Waypoint" : "" : "First Waypoint the creeps will head to" 
	input	SpawnNPCFromScript(integer) : "Spawn X npcs from the script."
]

@PointClass base(Targetname) gameUnitModel( NPCScriptName ) = npc_dota_spawner: 
	"Spawns NPCs based on scripts."
[
	NPCScriptName(gameunitclass) : "NPC Script" : "" : "Name of the NPC script used to spawn this character."
	NPCUniqueName(string) : "Unique NPC Name" : "" : "Name of the NPC."
	NPCFirstWaypoint(target_destination) : "First Waypoint" : "" : "First Waypoint the creeps will head to"
]

@PointClass base(Targetname) = dota_item_rune_spawner :
	"A marker for where runes spawn."
[

]

@PointClass base(PlayerClass) studio("models/editor/playerstart.mdl") = info_player_start_goodguys :
	"Spawn point for Radiant heroes."
[

]

@PointClass base(PlayerClass) studio("models/editor/playerstart.mdl") = info_player_start_badguys :
	"Spawn point for Dire heroes."
[

]

@PointClass base(PlayerClass, teamnumber) studio("models/editor/playerstart.mdl") = info_player_start_dota :
	"Spawn point for heroes of any team."
[
]

@PointClass base(Targetname) occluder(radius) color(255 0 0) = env_occluder : 
	"A test entity for radius occluding for the fog of war system."
[
	radius(float) : "Radius" : 128 : "The radius around this occluder."
]

@PointClass base(Targetname) line_occluder(radius) color(255 0 0) = env_line_occluder : 
	"A test entity for line occluding for the fog of war system."
[
	radius(float) : "Radius" : 128 : "The radius around this occluder."
]


@PointClass base(Targetname) viewer(radius) color(0 255 0) = env_viewer : 
	"A test entity for viewing for the fog of war system."
[
	radius(float) : "Radius" : 256 : "The radius around this viewer."
]

@PointClass base(Studiomodel,Targetname) dota_obstruction() = ent_dota_tree :
	"Creates a Dota tree.  Trees have collision, block fog of war visibility, and can be destroyed.  Note: it's far faster to place trees via the Tile Editor tool."
[
	rendercolor(color255) : "FX Color (R G B)" : "255 255 255" : "The FX color is used by the selected Render Mode."
	body(integer) : "bodygroup" : 1 : "Show tree in Hammer"
	
	input CutDown(void) : "Cut down the tree."
	input CutDownForever(void) : "Cut down the tree and don't grow back."
	input GrowBack(void) : "Force the tree to regrow."
]

@PointClass base(Targetname) dota_obstruction("models/editor/simple_obstruction.vmdl") = point_simple_obstruction
[
	StartDisabled(boolean) : "Start Disabled" : 0
	block_fow(boolean) : "Block Vision/FoW" : 1
	
	input Toggle(void) : "Toggle."
	input Enable(void) : "Enable the obstruction."
	input Disable(void) : "Disable the obstruction."
]

@PointClass base(prop_dynamic_base, Targetname, teamnumber) studioprop() = dota_prop_customtexture: 
	"[TOOLTIP NEEDS IMPROVEMENT] Custom texture prop."
[
]

@PointClass base(info_particle_system) editormodel("models/editor/cone_helper.vmdl") particle() = dota_world_particle_system : 
	"[TOOLTIP NEEDS IMPROVEMENT] Dota world particle system."
[
	dotaworldtype(choices) : "Particle Type" : 0 =
	[
		0: "Ambient Creature"
		1: "Generic"
	]

	showatday(choices) :"Show during day" : 0 =
	[
		0: "No"
		1: "Yes"
	]

	showatnight(choices) :"Show at night" : 0 =
	[
		0: "No"
		1: "Yes"
	]
]

@PointClass base(prop_dynamic_base, Targetname, teamnumber) studioprop() = prop_dynamic_clientside: 
	"Client-side dynamic prop."
[
	is_banner(choices) :"Replaceable Player Banner?" : 0 =
	[
		0: "No"
		1: "Yes"
	]
]

@PointClass base(prop_dynamic_base, Targetname, teamnumber) studioprop() = prop_player_cosmetic: 
	"Cosmetic player prop."
[
	playernumber(choices) :"Player Number" : 1 =
	[
		1: "Player 1"
		2: "Player 2"
		3: "Player 3"
		4: "Player 4"
		5: "Player 5"
	]

	cosmetic_type(choices) :"Cosmetic Type" : 0 =
	[
		0: "Pennant"
		1: "Pennant Post"
		2: "Display 1"
	]
]


@PointClass base(prop_dynamic_base, Targetname) studioprop() = ambient_creatures: 
	"Client-side dynamic prop."
[
	showatday(choices) :"Show during day" : 0 =
	[
		0: "No"
		1: "Yes"
	]

	showatnight(choices) :"Show at night" : 0 =
	[
		0: "No"
		1: "Yes"
	]
]

@SolidClass base(func_brush) = ambient_creatures_zone:
	"Client-side func_brush."
[
	showatday(choices) :"Show during day" : 0 =
	[
		0: "No"
		1: "Yes"
	]

	showatnight(choices) :"Show at night" : 0 =
	[
		0: "No"
		1: "Yes"
	]
]

@PointClass size(-8 -8 -8, 8 8 8) wirebox(min, max) = world_bounds
[
	min(vecline) : "Min" : "-7232 -7488 0" : "World min bounds (Z currently ignored)."
	max(vecline) : "Max" : "7168 6656 0" : "World max bounds (Z currently ignored)."
]

@BaseClass base(teamnumber) = dota_building
[ 
	link(string) : "Linked" : " " : "The Linked Unit."	
	 
	vulnerableoncreepspawn(choices) :"Vulnerable On Creep Spawn" : 0 =
	[
		0: "No"
		1: "Yes"
	]	

	invuln_count(integer):"Invulnerability Link Count" : 0 : "The number of entities linked to this to trigger to remove invulnerability."

	playerowner(choices) :"Player Owner" : 0 =
	[
		0: "None"
		1: "Player 1"
		2: "Player 2"
		3: "Player 3"
		4: "Player 4"
		5: "Player 5"
	]

	destruction_lvl1(studio) : "Damage lvl 1 model"
	destdmgamnt_lvl1(float) : "lvl 1 hurt percentage" : "66" : "The health percentage at which first level of damage happens. This is the percentage of health left."
	destruction_lvl2(studio) : "Damage lvl 2 model"
	destdmgamnt_lvl2(float) : "lvl 2 hurt percentage" : "33" : "The health percentage at which second level damage happens. This is the percentage of health left."
	ambientfx(particlesystem) : "Ambient Effect"
	destroyfx(particlesystem) : "Destruction Effect"
	destroysound(sound) : "Destruction Sound Effect" : "" : "When the building is destroyed, this sound effect will be played, originating from this entity."
	dmglvl1sound(sound) : "Damage lvl 1 Sound Effect" : "" : "When the building is damaged to the first level, this sound effect will be played, originating from this entity."
	dmglvl2sound(sound) : "Damage lvl 2 Effect" : "" : "When the building is damaged to the second level, this sound effect will be played, originating from this entity."
	MapUnitName(string) : "Unit Name" : "" : "Unit Name to look up in npc txt files to set this entity's data."
	
	input	SetInvulnCount(integer) : "Sets the invulnerable count on this building."
	input	ReduceInvulnCount(void) : "Reduces the invulnerable count by one on this build. When the count goes to 0 or lower, backdoor protection is disabled."
]

@PointClass base(prop_dynamic_base, Targetname, dota_building, teamnumber) studioprop() = npc_dota_barracks: 
	"Creates a barracks, which spawns creeps at regular intervals and can be destroyed by enemy teams."
[
	upgrade_level(choices) :"Upgrade Category" : 0 =
	[
		0: "UPGRADED_NONE"
		1: "UPGRADED_BAD_BOTTOM_MELEE"
		2: "UPGRADED_BAD_BOTTOM_RANGE"
		4: "UPGRADED_BAD_MID_MELEE"
		8: "UPGRADED_BAD_MID_RANGE"
		16: "UPGRADED_BAD_TOP_MELEE"
	 	32: "UPGRADED_BAD_TOP_RANGE"
	 	64: "UPGRADED_GOOD_BOTTOM_MELEE"
		128: "UPGRADED_GOOD_BOTTOM_RANGE"
		256: "UPGRADED_GOOD_MID_MELEE"
		512: "UPGRADED_GOOD_MID_RANGE"
		1024: "UPGRADED_GOOD_TOP_MELEE"
	 	2048: "UPGRADED_GOOD_TOP_RANGE"
	]
]

@PointClass base(prop_dynamic_base, Targetname, dota_building) studioprop() = npc_dota_tower: 
	"Creates a Dota tower that attacks enemy units, provides vision of invisible enemies, and allows allies to teleport to it."
[
	output OnTowerKilled(void) : "Fired whenever the tower is destroyed."
]
@PointClass base(prop_dynamic_base, Targetname, dota_building) studioprop() = npc_dota_building: 
	"Creates a simple building."
[
]

@PointClass base(prop_dynamic_base, Targetname, dota_building) studioprop() = npc_dota_fort: 
	"Creates an ancient. In standard Dota2 PvP, the win condition is to destroy the enemy team's ancient."
[
]

@PointClass base(prop_dynamic_base, Targetname, dota_building) studioprop() = npc_dota_holdout_tower_lightfast: 
	"(used in Frostivus event) Creates a lightly-damaging, fast-attacking tower.  This can also be edited in the npc_units.txt file."
[
]

@PointClass base(prop_dynamic_base, Targetname, dota_building) studioprop() = npc_dota_holdout_tower_heavyslow: 
	"(used in Frostivus event) Creates a heavily-damaging, slowly-attacking tower.  This can also be edited in the npc_units.txt file."
[
]

@PointClass base(prop_dynamic_base, Targetname, dota_building) studioprop() = npc_dota_holdout_tower_reducespeed: 
	"(used in Frostivus event) Creates a tower that reduces enemy movespeed.  This can also be edited in the npc_units.txt file."
[
]

@PointClass base(prop_dynamic_base, Targetname) studioprop() = ent_dota_shop: 
	"Creates a Dota item shop."
[
	shoptype(choices) :"Shop Type" : 0 =
	[
		0: "Home"
		1: "Side"
		2: "Secret"
	]
]

@PointClass base(prop_dynamic_base, Targetname) studioprop() = ent_dota_halloffame: 
	"[TOOLTIP NEEDS IMPROVEMENT] The Hall of Fame."
[
]

@PointClass base(prop_dynamic_base, Targetname, dota_building, teamnumber) studioprop() = ent_dota_fountain: 
	"The Fountain"
[
]

@PointClass base(Targetname, EnableDisable) sphere(minfalloff) sphere(maxfalloff) iconsprite("editor/color_correction.vmt") = dota_color_correction : 
	"An entity to control the color correction in the map."
[
	minfalloff(float) : "Min Radius" : "200.0"   : "This is the distance at which this color correction is in 100% control"
	maxfalloff(float) : "Max Radius"   : "400.0" : "This is the distance where this color correction starts taking effect."
	filename(string)  : "Lookup Table Filename"			: ""	  : "This is the lookup table filename"
]


@PointClass base(Targetname) = info_courier_spawn_radiant: 
	"Spawns a Radiant team courier."
[
]
@PointClass base(Targetname) = info_courier_spawn_dire: 
	"Spawns a Dire team courier."
[
]

@PointClass base(Targetname, teamnumber) = info_courier_spawn: 
	"Spawns a team courier."
[
]

@SolidClass base(Trigger) = trigger_shop : 
	"Region that defines the shop radius."
[
	shoptype(choices) :"Shop Type" : 0 =
	[
		0: "Home"
		1: "Side"
		2: "Secret"
	]

	output OnTrigger(void) : "Fired whenever the trigger is activated."
]

@SolidClass base(Trigger) = trigger_no_wards : 
	"Wards disallowed here."
[
]

@SolidClass base(Trigger) = trigger_boss_attackable : 
	"Boss (Roshan) is attackable from here."
[
]

@PointClass base(Targetname, teamnumber) gameUnitModel( CustomNPCName ) = npc_dota_scripted_spawner:
	"[DEPRECATED ENTITY?] Spawns NPCs based on scripts for tutorials / single player / co-op."
[
	NPCFirstWaypoint(target_destination) : "First Waypoint" : "" : "First Waypoint the spawned NPCs will head to" 

	NPCType(choices) :"NPC Type" : 0 =
	[
		0: "melee creep (0)"
		1: "ranged creep (1)"
		2: "siege creep (2)"
		3: "Roquelaire (3)"
		4: "Keeper of the Light (4)"
		5: "Razor (5)"
		6: "Tidehunter (6)"
		7: "Observer Ward (7)"
		8: "Custom (8)"
	]
	CustomNPCName(gameunitclass) : "Custom NPC Name" : "" : "Custom name of NPC: (ex. npc_dota_hero_tidehunter )."

	input	SpawnNPC(integer) : "Spawn X NPCs. Set the team and type of the NPC before calling this."
	input	SetNPCTeam(integer) : "Set the NPC team. See the 'NPC Team' choices for the valid values."
	input	SetNPCType(integer) : "Set the NPC type. See the 'NPC Type' choices for the valid values."
	input	SetNPCWaypoint(target_destination) : "Set the waypoint that spawned NPCs should head to. Living NPCs will move to it when they're ready to move (i.e. not in combat)."
	input	RemoveAllSpawnedUnits(void) : "Remove all living spawned NPCs."
	input	SetAllowRelaxation(integer) : "Set whether spawned NPCs are allowed to relax (1 for true, 0 for false). Relaxing NPCs will play sit down animations when they're idle."
	input	SetAllowAutoAttack(integer) : "Set whether spawned NPCs are allowed to automatically attack nearby enemies (1 for true, 0 for false). By default spawned NPCs will do so."
	input	SetAutomaticallyRespawn(integer) : "Set whether this spawned should automatically respawn any dying spawned NPCs. If true, it'll never fire the OnAllUnitsKilled output."
	input	SetPlayPostVictoryAnimation(integer) : "Set whether spawned NPCs should play post combat victory animations (1 for true, 0 for false). If so, the NPCs will play a victory animation whenever the last nearby enemy is killed."
	input	FireTutorialAdvanceEvent(string) : "Fire a tutorial event. If the string matches the current tutorial lesson's 'advance_event' value, the lesson will advance."
	input	SetSpawnPoint(target_destination) : "Set the spawn point of any NPCs created by this spawner. By default it'll be the spawner itself."
	input	SetCompanion(bool) : "Turn on/off companion behavior."
	input	SetCompanionAttack(bool) : "Turn on/off companion creep aggression."
	input	TeleportToWaypoint(target_destination) : "Teleport the spawned NPC to a waypoint."
	input	SetInvulnerable(bool) : "Turn on/off invulnerability for any NPC created by this spawner."
	input	SetHealth(integer) : "Set the health of all currently living NPCs created by this spawner. Note that this will not affect the health of NPCs spawned in the future."
	input	ForceIdle(bool) : "Force the NPC to go idle."
	input	ForceCreepAttack(bool) : "Force the NPC to attack creeps."
	input   UseAbility(integer) : "Force the NPC to use an ability."
	input	SetDuration(float) : "Set a general timer for the NPC."
	input	SetAllowHeroTargets(bool) : "Allow targeting of heroes (1 for true, 0 for false)."
	input   SetCustomNPCName(string) : "Set custom NPC for spawning."

	output	OnAllUnitsKilled(void) : "Fired when the last of our spawned NPCs has been killed."
	output	OnUnitKilled(void) : "Fired whenever one of our spawned NPCs has been killed."
	output  OnHealthLow(void) : "Fired when a NPCs health is low (less than 25 percent)."
]


@PointClass base(Targetname) = dota_item_spawner :
	"Spawn items."
[
	ItemName(gameitemclass) : "Item Name" : "" : "The name of the item to spawn."

	input	SpawnItem(void) : "Spawn an item."
	input	SetItemName(string) : "Set the item name."
]


@SolidClass base(Trigger) = trigger_hero : 
	"A trigger that's fired when a hero touches it."
[
	wait(integer) : "Delay Before Reset" : 1 : "Amount of time, in seconds, after the trigger_multiple has triggered before it can be triggered again. If set to -1, it will never trigger again (in which case you should just use a trigger_once)."

	// Inputs
	input TouchTest(void) : "Tests if the trigger is being touched and fires an output based on whether the value is true or false." 
	
	// Outputs
	output OnTrigger(void) : "Fired whenever the trigger is activated."
	output OnTouching(void) : "Fired when the TestTouch input is true (something is touching the trigger.)"
	output OnNotTouching(void) : "Fired when the TestTouch input is not true (nothing is touching the trigger.)"
]

@PointClass base(Targetname) iconsprite("editor/info_target.vmt") line(255 255 255, targetname, other_blocker) = tutorial_npc_blocker: "The start or endpoint of an NPC blocking line."
[
	other_blocker(target_destination) : "Other Blocker Point" : "" : "The tutorial_npc_blocker marking the other end of this NPC blocking line." 	
	StartDisabled(boolean) : "Start Disabled" : 0

	Hidden(boolean) : "Hidden" : 1 : "Do not show visual effect for blocker"
	input Enable(void) : "Enable this blocking line."
	input Disable(void) : "Disable this blocking line."
	input Toggle(void) : "Toggles the state of this blocking line."
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt") studio("models/editor/axis_helper.mdl") = info_roquelaire_perch : "(used in Dota2 PvP tutorial) A perch point for Roquelaire to sit on."
[
]


//-------------------------------------------------------------------------
// Global Light
//-------------------------------------------------------------------------

@PointClass base(Targetname, EnableDisable) iconsprite("editor/shadow_control.vmt") renderPipelineObject( "ToolObjects/GlobalLight", "GlobalLight" ) = env_global_light : 
	"Control the global light that casts shadows in a Dota map."
[
	angles(string) : "Pitch Yaw Roll (Y Z X)" : "45 20 180" : "This is the light cast direction. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, and roll is the rotation around the X axis."
	ambientangles(angle) : "Ambient Angle ( Y Z X )" : "0 100 0" : ""
	
	color(color255) : "Color" : "255 255 255 1" : "This is the color of the global light."
	lightscale(float) : "Light Scale" : "1.0" : "This controls the overall intensity of the light."
	ambientcolor1(color255) : "Ambient Color" : "128 128 128 1" : "This is the ambient color of the world."
	ambientscale1(float) : "Ambient Scale" : "1.0" : "This controls how much ambient there is."
	ambientcolor2(color255) : "Shadow Color" : "24 24 24 1" : "This is the shadow color of the world."
	ambientscale2(float) : "Shadow Scale" : "1.0" : "This controls how much shadow on entities there are."
	groundscale(float) : "Shadow Ground Scale" : "1.0" : "This controls how much shadow on the ground there is."
	
	specularangles(angle) : "Specular Angle ( Y Z X )" : "90 0 0" : ""
	specularpower(float) : "Specular Power" : "16" : ""
	specularcolor(color255) : "Specular Color" : "128 128 128 1" : "This is the color of the specular."
	fov(float) : "FOV" : 5 : "This is the field of view that the sunlight casts in. Use lower values for more distant sun and sharper shadows."
	nearz(float) : "NearZ Distance" : "4" : "This controls the near clipping plane's distance from the player."
	texturename(resource:texture) : "Cloud Texture" : "materials/effects/light_clouds_00.vtex"
	enableshadows(boolean) : "Enable Shadows" : "1" : "Enables/disables shadows from this projected texture."
	cloudscale(float) : "Cloud Scale" : "1500" : "This is the projected scale size of the clouds"
	cloud1speed(float) : "Cloud 1 Speed" : "50" : "This is the speed at which the cloud layer 1 scrolls"
	cloud1direction(angle) : "Cloud 1 Direction" : "0 0 0" : "This is the direction at which the cloud layer 1 scrolls"
	cloud2speed(float) : "Cloud 2 Speed" : "111" : "This is the speed at which the cloud layer 2 scrolls"
	cloud2direction(angle) : "Cloud 2 Direction" : "0 0 0" : "This is the direction at which the cloud layer 2 scrolls"
	fow_darkness(float) : "FoW Darkness" : "2.7" : "Controls how dark the fog of war is, 0 is black, larger values are lighter"

	// Inputs
	input LightColor(color255) : "Set the light color."
	input SetAngles(string) : "Set the global light direction."
	input SetFOV(float) : "Set the field of view the global light casts."
	input SetNearZDistance(float) : "Set the near z distance."
	input SetTexture(string) : "Set the texture cookie of the global light."
	input EnableShadows(bool)		: "Set the if shadows are enabled"
]


//-------------------------------------------------------------------------
// Ambient light control
//-------------------------------------------------------------------------
//@PointClass base(Targetname, EnableDisable, SpatialEntity) sphere(minfalloff) sphere(maxfalloff) iconsprite("editor/color_correction.vmt") = env_ambient_light : 
//	"An entity to control the color correction in the map."
//[
//	color(color255) : "Color (R G B)" : "255 255 255"
//	
//	// Inputs
//	input SetColor(color255) : "Sets the color."
//]



@PointClass base(Targetname, Parentname) sphere(radius) externalHelper("ToolObjects/env_deferred_light") = env_deferred_light : 
	"[TOOLTIP NEEDS IMPROVEMENT] Deferred light entity."
[
	spawnflags(flags) =
	[
		1  : "Enabled"				: 1
	]

	target(target_destination)	: "target" : : "target"	
	
	lightcolor(color255)		: "Light Color" : "255 255 255 200" : "Light Color RGB-Intensity"
	radius(float)				: "Radius" : "128.0" : "Size of the light"	
	intensity(float)			: "Intensity" : "1.0" : "Intensity of the light"	

	// Inputs
	input TurnOn(void)				: "Turn on the texture"
	input TurnOff(void)				: "Turn off the texture"
	input LightColor(color255)		: "Change the light color/brightness"
]


@PointClass base(Targetname, Parentname) studio("models/editor/cone_helper.mdl") = env_deferred_spot_light : 
	"[TOOLTIP NEEDS IMPROVEMENT] Deferred spot light."
[
	spawnflags(flags) =
	[
		1  : "Enabled"				: 1
	]

	target(target_destination)		: "target" : : "target"	
	
	lightcolor(color255)			: "Light Color" : "255 255 255 200" : "Light Color RGB-Intensity"
	intensity(float)				: "Intensity" : "1.0" : "Intensity of the light"	
	
	spot_light_distance(float)		: "Spot Light Distance" : "0.0" : "Distance if it is a spot light"	
	spot_light_size(float)			: "Spot Light Size" : "0.0" : "Size at the end of the spot light"	

	// Inputs
	input TurnOn(void)				: "Turn on the texture"
	input TurnOff(void)				: "Turn off the texture"
	input LightColor(color255)		: "Change the light color/brightness"
]

@PointClass base(Targetname) gameUnitModel( MapUnitName ) = npc_dota_base : "Used to place a dota NPC."
[
	rendercolor(color255)			: "Color (R G B)" : "255 255 255" : "Color tint to apply to the model"
	MapUnitName(gameunitclass) 		: "Unit Name" : "npc_dota_neutral_kobold" : "The specific unit type to spawn."
	m_iTeamNum(choices)				: "Team Number" : "4" : "The team this unit is a member of." = 
	[
		0 : "Unassigned"
		1 : "DOTA_TEAM_SPECTATOR"
		2 : "DOTA_TEAM_GOODGUYS"
		3 : "DOTA_TEAM_BADGUYS"
		4 : "DOTA_TEAM_NEUTRALS"
		5 : "DOTA_TEAM_NOTEAM"
	]
	initial_waypoint(target_destination)	: "Initial Waypoint" : "" : "The first waypoint to path to."
	UseNeutralCreepBehavior(boolean) : "Use Neutral Creep Behavior" : 0 : "Should we use creep camp leashing behavior."

	// Inputs
	input MoveTo(target_destination)	: "Move to a target."
	input MoveToAttack(target_destination) : "Move to attack a target."
	input MoveToPositionAggressive(target_destination) : "Attack-move a location."
	input SpeechBubble( string ) : "Say something in a speech bubble."
	input DestroyAllSpeechBubbles( void ) : "Remove all current active (and queued) speech bubbles."
]

@PointClass base(ent_dota_game_events) = dota_custom_game_events : "Used to change settings on the game mode for custom games."
[
	GoldPerTick( integer ) : "Gold Per Tick" : "1" : "Gold to award to all players each gold tick."
	GoldTickTime( float ) : "Gold Tick Time" : "0.6" : "Time in seconds between gold ticks."
	PlayerStartingGold( integer ) : "Player Starting Gold" : "625" : "Gold players start with."
	HeroRespawnEnabled( boolean ) : "Hero Respawn" : 1 : "Do heroes automatically respawn?"
	TreeRegrowTime( float ) : "Tree Regrow Time" : "300" : "Time in seconds for a tree to regrow."
	HeroSelectionTime( float ) : "Hero Selection Time" : "60" : "Time in seconds for hero selection."
	PreGameTime( float ) : "Pre-Game Time" : "90" : "Time in seconds before the game begins."
	PostGameTime( float ) : "Post-Game Time" : "360" : "Time in seconds after the game ends before the server."
	TimeOfDay( float ) : "Time Of Day" : "0" : "Current time of day."
	HeroMinimapIconScale( float ) : "Hero Minimap Icon Scale" : "1.0" : "Scale for hero minimap icons."
	CreepMinimapIconScale( float ) : "Creep Minimap Icon Scale" : "1.0" : "Scale for creep minimap icons."
	RuneMinimapIconScale( float ) : "Rune Minimap Icon Scale" : "1.0" : "Scale for rune minimap icons."
	IsFirstBloodActive( boolean ) : "Is First Blood Active" : "1" : "Is first blood active?"
	UseCustomHeroXPValues( boolean ) : "Use Custom Hero XP Values" : "0" : ""
	UseBaseGoldBountyOnHeroes( boolean ) : "Use Base Gold Bounty On Heroes" : "0" : "Force base gold usage instead of calculated value."
	RemoveIllusionsOnDeath( boolean ) : "Remove Illusions On Death" : "0" : ""
	TopBarTeamValuesVisible( boolean ) : "Top Bar Team Values Visible" : "1" : ""
	CameraDistanceOverride( float ) : "Camera Distance Override" : "0" : "Override the camera distance."
	DisableFogOfWar( boolean ) : "Disable Fog Of War" : "0" : ""
	IsSafeToLeave( boolean ) : "Is Safe To Leave" : "0" : "Is this game safe to leave?"
	ForceSelectHero( string ) : "Force Select Hero" : ""
	UseUniversalShopMode( boolean ) : "Use Universal Shop Mode" : "0" : "Can you buy any item from any shop?"
	DisableStashPurchasing( boolean ) : "Disable Purchasing to Stash" : "0" : "Disable purchasing items to the stash. If disabled shops can only be used when nearby."
	DisableAnnouncer( boolean ) : "Disable Announcers" : "0" : "Mute the in-game announcers"
	FixedRespawnTime( float ) : "Fixed Respawn Time" : "-1" : "Fixed time for heroes to respawn (or -1 to use the standard rules)"
	HideKillMessageHeaders( boolean ) : "Hide Kill-Message Headers" : "0" : "Hide multikill, streak, and first-blood banners"

	input SetGameWinner( integer ) : "Set the winning team and end the game."
	input LevelAllHeroesUpOnce( void ) : "Level each hero in the game up one level."
	input LevelAllHeroesToMax( void ) : "Level each hero in the game to the max level."
	input LevelAllHeroesToLevel( integer ) : "Ensure all heroes are at least level."
	input SetStashPurchasingDisabled( bool ) : "Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items."
]

@BaseClass = dota_entity_filter_flags
[
	invert_filter_check( boolean ) : "Invert Filter" : "0"

	every_unit( boolean ) : "Every Unit" : "0"

	UnitName( string ) : "Unit Name" : ""

	TeamNumber( choices ) : "Team Number" : "0" : "" = 
	[
		0 : "Any Team"
		1 : "DOTA_TEAM_SPECTATOR"
		2 : "DOTA_TEAM_GOODGUYS"
		3 : "DOTA_TEAM_BADGUYS"
		4 : "DOTA_TEAM_NEUTRALS"
		5 : "DOTA_TEAM_NOTEAM"
	]

	IsAncient( boolean ) : "IsAncient" : "0"
	IsNeutralUnitType( boolean ) : "IsNeutralUnitType" : "0"
	IsSummoned( boolean ) : "IsSummoned" : "0"
	IsHero( boolean ) : "IsHero" : "0"
	IsRealHero( boolean ) : "IsRealHero" : "1"
	IsTower( boolean ) : "IsTower" : "0"
	IsMechanical( boolean ) : "IsMechanical" : "0"
	IsPhantom( boolean ) : "IsPhantom" : "0"
	IsIllusion( boolean ) : "IsIllusion" : "0"
	IsCreep( boolean ) : "IsCreep" : "0"
	IsLaneCreep( boolean ) : "IsLaneCreep" : "0"
]

// NOTE: We don't inherit directly from trigger_multiple here because we don't want the confusing spawnflags
@SolidClass base(Targetname, Parentname, EnableDisable,dota_entity_filter_flags) = trigger_dota : "Dota-specific Trigger."
[
	wait(integer) : "Delay Before Reset" : 1 : "Amount of time, in seconds, after the trigger_multiple has triggered before it can be triggered again. If set to -1, it will never trigger again."
	filtername(filterclass) : "Filter Name" : : "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."

	// Inputs
	input Toggle(void) : "Toggles this trigger between enabled and disabled states."

	input TouchTest(void) : "Tests if the trigger is being touched and fires an output based on whether the value is true or false." 
	
	// Outputs
	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."

	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger, and no other entities are touching it. Only entities that passed this trigger's filters are considered."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnEndTouchAll(void) : "Fires when an entity stops touching this trigger, and no other entities are touching it. Only entities that passed this trigger's filters are considered."

	output OnTrigger(void) : "Fired whenever the trigger is activated."
	output OnTouching(void) : "Fired when the TestTouch input is true (something is touching the trigger.)"
	output OnNotTouching(void) : "Fired when the TestTouch input is not true (nothing is touching the trigger.)"
]

@PointClass base(trigger_multiple,dota_entity_filter_flags) = filter_dota : "Dota-specific Filter."
[
]

@OverrideClass = path_corner
[
    action(string) : "Action" : "" : "Name of action to perform after arriving."   	        
]

